/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import BN from "bn.js";
import { Contract, ContractOptions } from "web3-eth-contract";
import { EventLog } from "web3-core";
import { EventEmitter } from "events";
import { ContractEvent, Callback, TransactionObject, BlockType } from "./types";

interface EventOptions {
  filter?: object;
  fromBlock?: BlockType;
  topics?: string[];
}

export class ArtSteward extends Contract {
  constructor(
    jsonInterface: any[],
    address?: string,
    options?: ContractOptions
  );
  clone(): ArtSteward;
  methods: {
    BENEFICIARY(): TransactionObject<string>;

    DENOMINATOR(): TransactionObject<string>;

    INITIAL_PRICE(): TransactionObject<string>;

    INITIAL_SALE_ARTIST_SHARE_NUMERATOR(): TransactionObject<string>;

    INITIAL_SALE_PLATFORM_SHARE_NUMERATOR(): TransactionObject<string>;

    PLATFORM(): TransactionObject<string>;

    RESALE_ARTIST_SHARE_NUMERATOR(): TransactionObject<string>;

    RESALE_OWNER_SHARE_NUMERATOR(): TransactionObject<string>;

    RESALE_PLATFORM_SHARE_NUMERATOR(): TransactionObject<string>;

    _collectPatronage(): TransactionObject<void>;

    art(): TransactionObject<string>;

    artist(): TransactionObject<string>;

    beneficiaryFund(): TransactionObject<string>;

    buy(
      _newPrice: number | string,
      _currentPrice: number | string
    ): TransactionObject<void>;

    changePrice(_newPrice: number | string): TransactionObject<void>;

    currentCollected(): TransactionObject<string>;

    deposit(): TransactionObject<string>;

    depositAbleToWithdraw(): TransactionObject<string>;

    depositWei(): TransactionObject<void>;

    exit(): TransactionObject<void>;

    foreclosed(): TransactionObject<boolean>;

    foreclosureTime(): TransactionObject<string>;

    patronageNumerator(): TransactionObject<string>;

    patronageOwed(): TransactionObject<string>;

    patronageOwedRange(_time: number | string): TransactionObject<string>;

    patronageOwedWithTimestamp(): TransactionObject<{
      patronageDue: string;
      timestamp: string;
      0: string;
      1: string;
    }>;

    patrons(arg0: string): TransactionObject<boolean>;

    price(): TransactionObject<string>;

    pullFunds(arg0: string): TransactionObject<string>;

    timeAcquired(): TransactionObject<string>;

    timeHeld(arg0: string): TransactionObject<string>;

    timeLastCollected(): TransactionObject<string>;

    totalCollected(): TransactionObject<string>;

    withdrawBeneficiaryFunds(): TransactionObject<void>;

    withdrawDeposit(_wei: number | string): TransactionObject<void>;

    withdrawPullFunds(): TransactionObject<void>;
  };
  events: {
    LogBuy: ContractEvent<{
      owner: string;
      price: string;
      0: string;
      1: string;
    }>;
    LogCollection: ContractEvent<string>;
    LogForeclosure: ContractEvent<string>;
    LogPriceChange: ContractEvent<string>;
    allEvents: (
      options?: EventOptions,
      cb?: Callback<EventLog>
    ) => EventEmitter;
  };
}
